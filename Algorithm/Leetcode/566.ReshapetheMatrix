class Solution:

# Solution 1: Using queue/stack Time: O(n*m) Space; O(n*m)
    def matrixReshape(self, nums, r, c):
        """
        :type nums: List[List[int]]
        :type r: int
        :type c: int
        :rtype: List[List[int]]
        """
        n=len(nums)
        m=len(nums[0])
        if n*m!=r*c:
            return nums
        stack=[]
        for i in range(n):
            for j in range(m):
                stack.append(nums[i][j])
        output=[[0 for j in range(c)] for i in range(r)]
        for i in range(r-1,-1,-1):
            for j in range(c-1,-1,-1):
                output[i][j]=stack.pop()
        return output


# Solution 2: less space Time: O(n*m) Space; O(n*m)

    def matrixReshape(self, nums, r, c):
        """
        :type nums: List[List[int]]
        :type r: int
        :type c: int
        :rtype: List[List[int]]
        """
        n=len(nums)
        m=len(nums[0])
        if n*m!=r*c:
            return nums
        output=[[0 for j in range(c)] for i in range(r)]
        row=0
        col=0
        for i in range(n):
            for j in range(m):
                output[row][col]=nums[i][j]
                if col==c-1:
                    row+=1
                    col=0
                else:
                    col+=1
        return output
                
