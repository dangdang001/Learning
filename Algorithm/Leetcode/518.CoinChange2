

# Solution 1: DP: O(n^2)
class Solution(object):
    def change(self, amount, coins):
        """
        :type amount: int
        :type coins: List[int]
        :rtype: int
        """
        D=[0]*(amount+1)
        D[0]=1
        for coin in coins:
            for i in range(1,amount+1):
                if i>=coin:
                    D[i]+=D[i-coin]
        return D[amount]                    
                    
# Solution 2: Recursive O(2^n)           
            
class Solution(object):
    def change(self, amount, coins):
        """
        :type amount: int
        :type coins: List[int]
        :rtype: int
        """
        self.count=0
        self.helper(coins,amount,0)
        return self.count
    
    def helper(self,coins,target,index):
        if target>=0:
            if target==0:
                self.count+=1
            else:
                for i in range(index,len(coins)):
                    self.helper(coins,target-coins[i],i)    

class Solution(object):
    def change(self, amount, coins):
        """
        :type amount: int
        :type coins: List[int]
        :rtype: int
        """
        res=[]
        self.helper(coins,amount,0,[],res)
        return res
    
    def helper(self,coins,target,index,path,res):
        if target>=0:
            if target==0:
                res.append(path)
            else:
                for i in range(index,len(coins)):
                    self.helper(coins,target-coins[i],i,path+[coins[i]],res)
    
        
