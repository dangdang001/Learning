class Solution:

Solution 1: Recursive Time: O(2^n), Space: O(n)
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n==1:
            return 1
        if n==2:
            return 2
        return self.climbStairs(n-1)+self.climbStairs(n-2)

Solution 2: DP Time: O(n), Space: O(n)

    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n==1:
            return 1
        D=[0] * n
        D[0],D[1]=1,2
        for i in range(2,n):
            D[i]=D[i-1]+D[i-2]
        return D[n-1]


Solution 3: DP with less space Time: O(n), Space: O(1)
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n==1:
            return 1
        if n==2:
            return 2
        a1,a2=1,2
        i=3
        while i<=n:
            an=a1+a2
            a1,a2=a2,an
            i+=1
        return an
