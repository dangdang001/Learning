# Time: O(n^2) Space: O(n)

# D[i] represents the length of the longest increasing subsequence possible considering the array elements upto the ith index,
# by necessarily including the ith element. 

class Solution:
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums)==0:
            return 0
        n=len(nums)
        D=[1]*n
        for i in range(1,n):
            for j in range(i):
                if nums[i]>nums[j]:
                    D[i]=max(D[i],D[j]+1)
        return D[n-1]
            
