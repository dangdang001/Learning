# Time:  O(1)
# Space: O(1)

# The Hamming distance between two integers is the number of positions
# at which the corresponding bits are different.
#
# Given two integers x and y, calculate the Hamming distance.
#
# Note:
# 0 ≤ x, y < 231.
#
# Example:
#
# Input: x = 1, y = 4
#
# Output: 2
#
# Explanation:
# 1   (0 0 0 1)
# 4   (0 1 0 0)
#       ↑   ↑
#
# The above arrows point to positions where the corresponding bits are different.

class Solution:
# Solution 1: 
    def hammingDistance1(self, x, y):
        """
        :type x: int
        :type y: int
        :rtype: int
        """
        import math
        a=[]
        b=[]
        if x!=0 and y!=0:
            i=max(math.floor(math.log(x,2)),math.floor(math.log(y,2)))
        elif y!=0:
            i=math.floor(math.log(y,2))
        elif x!=0:
            i=math.floor(math.log(x,2))
        else:
            return 0
        count=0
        while i>=0:
            a.append(max(x//(2**i),0))
            x=x % (2**i)
            b.append(max(y//(2**i),0))
            y=y % (2**i)
            i-=1
        for k in range(len(a)):
            if a[k]!=b[k]:
                count+=1
        return count
        
        
 # Solution 2: Using python's bitwise opertor: ^(bitwise xor),&(bitwise and),|(bitwise or)
 # The bin() method converts and returns the binary equivalent string of a given integer.
 
 def hammingDistance2(self, x, y):
        """
        :type x: int
        :type y: int
        :rtype: int
        """
        result=bin(x^y)
        count=0
        for digits in str(result):
            if digits=='1':
                count+=1
        return count
        
 #  Or: return bin(x ^ y).count('1')
        
                        
        
