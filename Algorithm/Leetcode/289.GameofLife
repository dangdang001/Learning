class Solution:
    def gameOfLife(self, board):
        """
        :type board: List[List[int]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        # state: live->dead: 3
        # state: dead->live: 2
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j]==1 or board[i][j]==3:
                    if self.nb(board,i,j)<2 or self.nb(board,i,j)>3:
                        board[i][j]=3
                else:
                    if self.nb(board,i,j)==3:
                        board[i][j]=2
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j]==2:
                    board[i][j]=1
                if board[i][j]==3:
                    board[i][j]=0
    # function to count the number of living neighbours of cell board[i][j]
    def nb(self,board,i,j):
        count=0
        if i>0 and j>0: count+=board[i-1][j-1] % 2
        if i>0: count+=board[i-1][j] % 2
        if i>0 and j<len(board[0])-1: count+=board[i-1][j+1] % 2
        if j>0: count+=board[i][j-1] % 2
        if j<len(board[0])-1: count+=board[i][j+1] % 2
        if i<len(board)-1 and j>0: count+=board[i+1][j-1] % 2
        if i<len(board)-1: count+=board[i+1][j] % 2
        if i<len(board)-1 and j<len(board[0])-1: count+=board[i+1][j+1] % 2
        return count
                        
                        
                        
            
