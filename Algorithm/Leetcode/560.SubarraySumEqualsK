class Solution:

# Solution 1: Brute force Time: O(n^3), Space: O(1)
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        count=0
        for i in range(len(nums)):
            for j in range(i+1,len(nums)+1):
                temp=sum(nums[i:j])
                if temp==k:
                    count+=1
        return count
              
# Solution 2: Cumulate sum: O(n^2), Space: O(1)
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        count=0
        for i in range(len(nums)):
            cum_sum=0
            for j in range(i,len(nums)):
                cum_sum+=nums[j]
                if cum_sum==k:
                    count+=1
        return count
                    
# Solution 3: Hash map record cum sum: O(n), Space: O(n)
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        cum,count=0,0
        lookup={}
        lookup[0]=1
        for num in nums:
            cum+=num
            if cum-k in lookup:
                count+=lookup[cum-k]
            if cum in lookup:
                lookup[cum]+=1
            else:
                lookup[cum]=1
        return count
