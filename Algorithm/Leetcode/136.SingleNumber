class Solution:
    # Solution 1: Use stack, Time: O(n^2), Space: O(n)
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        stack=[]
        for item in nums:
            if item not in stack:
                stack.append(item)
            else: 
                stack.remove(item)
        return stack.pop()
        
     # Solution 2: Use hash table, Time: O(n), Space: O(n)
     def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        hash_table={}
        for item in nums:
            try:
                hash_table.pop(item)
            except:
                hash_table[item]=1
        return hash_table.popitem()[0]
        
     # Solution 3: Use math (only applied to numeric list case), Time: O(n), Space: O(n)  
     def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        return 2*sum(set(nums))-sum(nums)
        
     # Solution 4: Use exclusive or, Time: O(n), Space: O(1)      
     def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        a=0
        for item in nums:
            a=a^item
        return a
        
        
        
