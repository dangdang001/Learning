# Ref: https://soulmachine.gitbooks.io/algorithm-essentials/java/dp/best-time-to-buy-and-sell-stock-with-cooldown.html
class Solution:
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        n=len(prices)
        if n==0:
            return 0
        buy,sell=[0]*n,[0]*n
        buy[0]=-prices[0]
        sell[0]=0
        for i in range(1,n):
            sell[i]=max(buy[i-1]+prices[i],sell[i-1])
            if i>1:
                buy[i]=max(buy[i-1], sell[i-2]-prices[i])
            else:
                buy[i]=max(buy[i-1],-prices[i])          
        return sell[n-1]
            
