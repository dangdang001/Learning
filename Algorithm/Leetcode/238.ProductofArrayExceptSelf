class Solution:

# Solution 1: Time: O(n^2), Space: O(n)
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        result=[1]*len(nums)
        for i,item in enumerate(nums):
            temp=result[i]
            result=[x*item for x in result]
            result[i]=temp
        return result
            
            

# Solution 2: Time: O(n), Space: O(n)

    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        n=len(nums)
        result=[]
        prod_pre=1
        for i in range(n):
            result.append(prod_pre)
            prod_pre=prod_pre*nums[i]
        prod_post=1
        for j in range(n-1,-1,-1):
            result[j]=result[j]*prod_post
            prod_post=prod_post*nums[j]
        return result

# Solution 3: Time: O(n), Space: O(n)
    def productExceptSelf(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        p=1
        pre=[]
        for num in nums:
            pre.append(p)
            p=p*num
        q=1
        post=[]
        nums.reverse()
        for num in nums:
            post.append(q)
            q=q*num
        post.reverse()
        return [a*b for a,b in zip(pre,post)]
