# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # Solution 1: Brute Force: Time: O(NlogN)
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        res=[]
        for list in lists:
            while list:
                res.append(list.val)
                list=list.next
        res.sort()
        dummy=new=ListNode(0)
        for item in res:
            new.val=item
            new=new.next
        return dummy.next
        
    # Solution 2: Merge sort Time: O(nk)
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        dummy=now=ListNode(0)
        min_index=0
        while True:
            min_now=float('inf')
            isnull=True
            for i in range(len(lists)):
                if lists[i]:
                    if lists[i].val<min_now:
                        min_now=lists[i].val
                        min_index=i
                    isnull=False
            if isnull==True:
                break
            lists[min_index]=lists[min_index].next
            now.next=ListNode(min_now)
            now=now.next
        return dummy.next

# Priority queue and heap in python:  https://www.bogotobogo.com/python/python_PriorityQueue_heapq_Data_Structure.php

    # Solution 3: Priority Queue Time: O(klogn)(insert to the priority queue is logn time)    
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        from Queue import PriorityQueue
        q=PriorityQueue()
        dummy=now=ListNode(0)
        for l in lists:
            if l:
                q.put((l.val,l))
        while not q.empty():
            val,l=q.get()
            now.next=ListNode(val)
            now=now.next
            l=l.next
            if l:
                q.put((l.val,l))
        return dummy.next        
        
       # Solution 4: Alternatively, using heap, Time: O(klogn)(insert to heap is logn time) 
       def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        from heapq import heapify, heappop, heappush
        dummy=now=ListNode(0)
        h=[(l.val, l) for l in lists if l]
        heapify(h)
        while h:
            val,l=heappop(h)
            now.next=ListNode(val)
            now=now.next
            l=l.next
            if l:
                heappush(h,(l.val,l))
        return dummy.next
