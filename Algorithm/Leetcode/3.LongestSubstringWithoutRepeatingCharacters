# Solution 1: Brute force Time: O(n^3) Space: O(n)
class Solution:
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s)==0:
            return 0
        max_len=1
        for i in range(len(s)-1):
            for j in range(i+1,len(s)):
                string=s[i:j+1]
                if len(set(list(string)))==j-i+1 and j-i+1>max_len:
                    max_len=j-i+1
        return max_len

# Solution 2: Tilling window with hash map Time: O(n) Space: O(n)
class Solution:
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s)==0:
            return 0
        max_len=1
        left=0
        lookup={}
        for right in range(len(s)): 
            if s[right] in lookup:
                left=max(left,lookup[s[right]]+1)
            lookup[s[right]]=right
            max_len=max(max_len,right-left+1)
        return max_len
        
