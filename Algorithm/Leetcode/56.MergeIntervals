# Definition for an interval.
# class Interval(object):
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e

# Sort by start of the interval first, then:
# if last and now have overlaps: extend the last
# else: append last and start again with now
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[Interval]
        :rtype: List[Interval]
        """
        if len(intervals)==0:
            return []
        if len(intervals)==1:
            return intervals
        res=[]
        intervals=sorted(intervals,key=lambda x: x.start)
        last=intervals[0]
        i=1
        while i<=len(intervals)-1:
            now=intervals[i]
            if now.start<=last.end:
                if now.end>last.end:
                    last.end=now.end
            else:
                res.append(last)
                last=now
            i+=1
        res.append(last)
        return res
