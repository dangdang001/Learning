# Loop through the grid, if encounter '1', extend the current island by doing DFS following the each of the four neighbours,
# until exceed the border or no '1' surrounding

# To avoid re-visit the points which formed the islands already searched, make them as '#', continue loop for next isolated '1'

# Time: O(n^2): Each node would be visited at most once.

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid:
            return 0
        count=0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]=='1':
                    count+=1
                    self.dfs(grid,i,j)
        return count
    
    def dfs(self,grid,i,j):
        if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j]!='1':
            return
        grid[i][j]='#'
        self.dfs(grid,i-1,j)
        self.dfs(grid,i+1,j)
        self.dfs(grid,i,j-1)
        self.dfs(grid,i,j+1)
