class Solution:

    # Solution 1 Time: O(n), Space: O(n)
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        if s==None:
            return True
        l=list(s)
        stack=[]
        while l:
            temp1=l.pop()
            if temp1 in (')',']','}'):
                stack.append(temp1)
            else:
                if not stack:
                    return False
                else:
                    temp2=stack.pop()
                    if temp1=='(' and temp2==')':
                        continue
                    elif temp1=='[' and temp2==']':
                        continue
                    elif temp1=='{' and temp2=='}':
                        continue
                    else:
                        return False
        return True if not stack else False
    
    # Solution 2: Use hash map to store the matched parenthesis Time: O(n), Space: O(n)
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        lookup={'(':')','[':']','{':'}'}
        l=list(s)
        stack=[]
        if not l:
            return True
        for char in l:
            if char in lookup:
                stack.append(char)
            else:
                if not stack:
                    return False
                else:
                    if char==lookup[stack.pop()]:
                        continue
                    else:
                        return False
        return True if not stack else False
