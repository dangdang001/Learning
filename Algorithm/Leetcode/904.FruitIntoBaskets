class Solution:

# Solution 1: Brute Force Time: O(n^2) Space: O(n)
    def totalFruit(self, tree):
        """
        :type tree: List[int]
        :rtype: int
        """
        n=len(tree)
        max_len=1
        for i in range(n-1):
            for j in range(i+1,n):
                temp=tree[i:j+1]
                lookup={}
                for item in temp:
                    if item in lookup:
                        lookup[item]+=1
                    else:
                        lookup[item]=1
                        if len(lookup)>2:
                            break
                if len(lookup)<=2:
                    max_len=max(max_len,j-i+1)
        return max_len


# Solution 2: Sliding window using counter Time: O(n) Space: O(n)
        
    def totalFruit(self, tree):
        """
        :type tree: List[int]
        :rtype: int
        """
        from collections import Counter
        basket=Counter()
        start,res=0,0
        for i,item in enumerate(tree):
            basket[item]+=1
            while len(basket)>2:
                basket[tree[start]]-=1
                if basket[tree[start]]==0:
                    del basket[tree[start]]
                start+=1
            res=max(res,i-start+1)
        return res
            
