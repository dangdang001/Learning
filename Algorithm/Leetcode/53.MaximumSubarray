# Find the contiguous subarray within an array (containing at least one number) which has the largest sum.
#
# For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
# the contiguous subarray [4,-1,2,1] has the largest sum = 6.
#
# click to show more practice.
#
# More practice:
# If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
#

# Solution 1: DP: Time: O(n) Space: O(n)

# DP[i]: maximum sum of subarray till index i(index i must be included in the subarray)
# if DP[i]+nums[i+1](continue adding i+1 th to the previous subarray) > DP[i+1](starting a new subarray from i+1): updating DP[i+1]
   
   def maxSubArray(self, nums): 
        D=[0]*len(nums)
        D[0]=nums[0]
        for i in range(1,len(nums)):
            D[i]=max(D[i-1]+nums[i],nums[i])
        return max(D)

# Solution 2: modified DP: Time: O(n) Space: O(1)
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        local_max,global_max=nums[0],nums[0]
        for i in range(1,len(nums)):
            local_max=max(local_max+nums[i],nums[i])
            global_max=max(global_max,local_max)
        return global_max
            
  

                    
    
