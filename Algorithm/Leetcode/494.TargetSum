class Solution:
    Solution 1: Brute force(?)
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """

        self.count=0
        self.helper(nums,0,0,S)
        return self.count
  
    def helper(self,nums,index,temp_sum,S):
        if index==len(nums):
            if temp_sum==S:
                self.count+=1
        else:
            self.helper(nums,index+1,temp_sum+nums[index],S)
            self.helper(nums,index+1,temp_sum-nums[index],S)
           
        

# dp, AC
class Solution(object):
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        count = collections.defaultdict(int)
        count[0] = 1
        for num in nums:
            tmp = collections.defaultdict(int)
            for k,v in count.items():
                tmp[k + num] += v
                tmp[k - num] += v
            count = tmp
        return count[S]
        
        
# Note:        
defaultdict means that if a key is not found in the dictionary, then instead of a KeyError being thrown, a new entry is created. The type of this new entry is given by the argument of defaultdict.

For example:

somedict = {}
print(somedict[3]) # KeyError

someddict = defaultdict(int)
print(someddict[3]) # print int(), thus 0
