class Solution:
    Solution 1: Brute force(?)
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        def cal(self, nums, S,i,sum_temp):
            count=0
            i=0
            sum_temp=0
            global count
            if i==len(nums):
                if sum_temp==S:
                    count+=1
            else:
                return self.cal(nums, S, i+1, sum_temp+nums[i])+self.cal(nums, S, i+1, sum_temp-nums[i])
            return count
        return cal(nums, S, 0,0)
                
# naive dfs, O(2^n), TLE
class Solution(object):
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        self.result = 0
        self.dfs(0, 0, S, nums)
        return self.result
        
    def dfs(self, idx, count, S, nums):
        if idx == len(nums):
            if count == S:
                self.result += 1
            return
        else:
            for flag in [1,-1]:
                self.dfs(idx+1, count+flag*nums[idx], S, nums)


# naive recursive, TLE
class Solution(object):
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        if len(nums) == 0:
            return 1 if S == 0 else 0
        curr_num = nums.pop()
        return self.findTargetSumWays(nums[:], S - curr_num) + self.findTargetSumWays(nums[:], S + curr_num)
        

# dp, AC
class Solution(object):
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        count = collections.defaultdict(int)
        count[0] = 1
        for num in nums:
            tmp = collections.defaultdict(int)
            for k,v in count.items():
                tmp[k + num] += v
                tmp[k - num] += v
            count = tmp
        return count[S]
        
        
# Note:        
defaultdict means that if a key is not found in the dictionary, then instead of a KeyError being thrown, a new entry is created. The type of this new entry is given by the argument of defaultdict.

For example:

somedict = {}
print(somedict[3]) # KeyError

someddict = defaultdict(int)
print(someddict[3]) # print int(), thus 0
