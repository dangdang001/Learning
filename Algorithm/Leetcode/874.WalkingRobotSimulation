class Solution(object):
    def robotSim(self, commands, obstacles):
        """
        :type commands: List[int]
        :type obstacles: List[List[int]]
        :rtype: int
        """
        max_square=0
        location=[0,0]
        direction=[0,1]
        for command in commands:
            if command==-2:
                if direction==[0,1]: direction=[-1,0]
                elif direction==[-1,0]: direction=[0,-1]
                elif direction==[0,-1]: direction=[1,0]
                elif direction==[1,0]: direction=[0,1]
            elif command==-1:
                if direction==[0,1]: direction=[1,0]
                elif direction==[1,0]: direction=[0,-1]
                elif direction==[0,-1]: direction=[-1,0]
                elif direction==[-1,0]: direction=[0,1]
            else:
                i=1
                while i<=command: 
                    location[0]+=direction[0]*1
                    location[1]+=direction[1]*1
                    if location in obstacles:
                        location[0]-=direction[0]*1
                        location[1]-=direction[1]*1
                        break
                    i+=1
            max_square=max(max_square,location[0]**2+location[1]**2)
        return max_square

    def robotSim(self, commands, obstacles):
        """
        :type commands: List[int]
        :type obstacles: List[List[int]]
        :rtype: int
        """
        max_square=0
        i,j=0,0
        direction=[(0,1),(1,0),(0,-1),(-1,0)]
        obstacles=set([tuple(x) for x in obstacles])
        d=0
        for command in commands:
            if command==-2:
                d=(d-1) % 4
            elif command==-1:
                d=(d+1) % 4
            else:
                while command: 
                    a,b=direction[d]
                    if (i+a,j+b) not in obstacles:
                        i+=a
                        j+=b
                        command-=1
                    else:
                        break
            max_square=max(max_square,i**2+j**2)
        return max_square
        
    def robotSim(self, commands, obstacles):
        """
        :type commands: List[int]
        :type obstacles: List[List[int]]
        :rtype: int
        """
        if not commands:
            return 0
        dir_x=[0,1,0,-1]
        dir_y=[1,0,-1,0]
        i,j,k=0,0,0
        xi,yi=dir_x[k], dir_y[k]
        obstacles=set([tuple(x) for x in obstacles])
        max_dist=0
        for command in commands:
            if command==-2:
                k=(k-1) % 4
                xi,yi=dir_x[k], dir_y[k]
            elif command==-1:
                k=(k+1) % 4
                xi,yi=dir_x[k], dir_y[k]
            else:
                while command>0:
                    a,b=i+xi,j+yi
                    if (a,b) in obstacles:
                        break
                    else:
                        i,j=a,b
                        command-=1
            max_dist=max(max_dist,i**2+j**2)
        return max_dist
                
