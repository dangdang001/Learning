class Solution:
# Solution 1: Brute force: Time: O(n^2), Space: O(1)
    def maxProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        max_prod=max(nums)
        for i in range(len(nums)-1):
            cum_prod=nums[i]
            for j in range(i+1,len(nums)):
                cum_prod=cum_prod*nums[j]
                max_prod=max(max_prod,cum_prod)
        return max_prod

# Solution 2: DP: Time: O(n), Space: O(n)

# Hint: 

# 1. Subproblem: D_max[i]=the maximum product ending in index i
# 2. Recursion: D_max[i]=max(D_max[i-1]*nums[i],D_min[i-1]*nums[i],nums[i])
# Note: the next maximum might be achived by multiplying the last largest prodcut or smallest product, 
#       depending on the sign of nums[i], thus also need to keep tracking the D_min[i].

    def maxProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        max_prod=[nums[0]]*len(nums)
        min_prod=[nums[0]]*len(nums)
        max_global=nums[0]
        for i in range(1,len(nums)):
            max_prod[i]=max(max_prod[i-1]*nums[i],min_prod[i-1]*nums[i],nums[i])
            min_prod[i]=min(max_prod[i-1]*nums[i],min_prod[i-1]*nums[i],nums[i])
            max_global=max(max_global,max_prod[i])
        return max_global
        
# Solution 3: DP with no extra space: Time: O(n), Space: O(1)
# Note: the curretn maximum and minimun have to be updated simutanously. 


    def maxProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        max_global=max_prod=min_prod=nums[0]
        for i in range(1,len(nums)):
            max_prod, min_prod=max(max_prod*nums[i],min_prod*nums[i],nums[i]), min(max_prod*nums[i],min_prod*nums[i],nums[i])
            max_global=max(max_global,max_prod)
        return max_global
        
