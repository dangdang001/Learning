# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):

# Solution 1: Hash map
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        lookup={}
        while head:
            if head in lookup:
                return True
            else:
                lookup[head]=1
                head=head.next
        return False
            
# Solution 2: slow-fast pointers

    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        slow=fast=head
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next
            if slow==fast:
                return True
        return False
            
