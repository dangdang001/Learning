# -*- coding: utf-8 -*-
"""
Created on Tue Nov 07 17:12:05 2017

Dynamic Programming

@author: dyin
"""

# 1. Fibonacci Series 

# a.use recursion

def fib1(n):
    if (n==0 or n==1):
        return 1
    else:
        return fib(n-1)+fib(n-2)

# b.use dynamic programming

# We can avoid the repeated work done is the method 1 by storing the Fibonacci numbers
# calculated so far.

def fib2(n):
    f=[None]*(n+1)
    f[0],f[1]=1,1
    i=2
    while (i<=n):
        f[i]=f[i-1]+f[i-2]
        i+=1
    return f[n]

# c.use space optimized method
def fib3(n):
    if (n==0 or n==1):
        return 1
    else:
        a0,a1=1,1
        i=2
        while (i<=n):
            a0,a1=a1,a0+a1
            i+=1
        return a1

# compare time complexity
%%timeit -n 1
fib1(30)

%%timeit -n 1
fib2(30)

%%timeit -n 1
fib3(30)

# 2. Caculate binomial coeffient: n choose k using dynamic programming

import numpy as np

def bin_coef(n,k):
    b=np.zeros((n+1,n+1))
    for i in range(n+1):
        b[i,0]=1
        b[i,i]=1
    for i in range(2,n+1):
        for j in range(1,i):
            b[i,j]=b[i-1,j-1]+b[i-1,j]
            
    return b[n,k]

